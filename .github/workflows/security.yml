name: 🔒 Security & Dependency Scanning

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  # Cargo audit for known vulnerabilities
  cargo-audit:
    name: 🔍 Cargo Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run cargo audit
        run: cargo audit --json | tee audit-results.json

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cargo-audit-results
          path: audit-results.json

  # Dependency vulnerability scanning
  dependency-review:
    name: 📦 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  # License compliance check
  license-check:
    name: ⚖️ License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-license
        run: cargo install cargo-license

      - name: Check licenses
        run: |
          echo "📋 Checking dependency licenses..."
          cargo license --json > licenses.json
          
          # Check for problematic licenses
          if cargo license | grep -E "(GPL|AGPL|LGPL)"; then
            echo "⚠️ Found copyleft licenses - review required"
            exit 1
          else
            echo "✅ All licenses are compatible"
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  # Code quality and security linting
  security-linting:
    name: 🔍 Security Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install cargo-clippy-sarif and sarif-fmt
        run: |
          cargo install clippy-sarif sarif-fmt

      - name: Run security-focused clippy
        run: |
          cargo clippy \
            --all-features \
            --message-format=json \
            -- \
            -W clippy::suspicious \
            -W clippy::security \
            -W clippy::perf \
            -D warnings \
            | clippy-sarif | tee results.sarif | sarif-fmt

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif

  # Docker security scanning
  docker-security:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -f Dockerfile.dev -t lab-manager:security-scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'lab-manager:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Secret scanning
  secret-scan:
    name: 🔐 Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # SAST (Static Application Security Testing)
  sast-analysis:
    name: 🔬 SAST Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: rust

      - name: Build for CodeQL analysis
        run: cargo build --release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Modular security testing for components
  component-security:
    name: 🧪 Component Security Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [handlers, storage, config, assembly]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Security test ${{ matrix.component }} component
        run: |
          echo "🔒 Security testing ${{ matrix.component }} component"
          
          # Component-specific security tests
          case "${{ matrix.component }}" in
            "handlers")
              echo "Testing input validation and sanitization"
              cargo test handlers -- --test-threads=1
              ;;
            "storage")
              echo "Testing file access and path traversal protection"
              cargo test storage -- --test-threads=1
              ;;
            "config")
              echo "Testing configuration security and secrets handling"
              cargo test config -- --test-threads=1
              ;;
            "assembly")
              echo "Testing component isolation and dependency security"
              cargo test assembly -- --test-threads=1
              ;;
          esac

  # Generate security report
  security-report:
    name: 📊 Security Report
    runs-on: ubuntu-latest
    needs: [cargo-audit, license-check, security-linting, docker-security, component-security]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check each job result
          if [[ "${{ needs.cargo-audit.result }}" == "success" ]]; then
            echo "✅ Cargo Audit: PASSED" >> security-summary.md
          else
            echo "❌ Cargo Audit: FAILED" >> security-summary.md
          fi
          
          if [[ "${{ needs.license-check.result }}" == "success" ]]; then
            echo "✅ License Check: PASSED" >> security-summary.md
          else
            echo "❌ License Check: FAILED" >> security-summary.md
          fi
          
          if [[ "${{ needs.security-linting.result }}" == "success" ]]; then
            echo "✅ Security Linting: PASSED" >> security-summary.md
          else
            echo "❌ Security Linting: FAILED" >> security-summary.md
          fi
          
          if [[ "${{ needs.docker-security.result }}" == "success" ]]; then
            echo "✅ Docker Security: PASSED" >> security-summary.md
          else
            echo "❌ Docker Security: FAILED" >> security-summary.md
          fi
          
          if [[ "${{ needs.component-security.result }}" == "success" ]]; then
            echo "✅ Component Security: PASSED" >> security-summary.md
          else
            echo "❌ Component Security: FAILED" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "## 🧱 Modular Security Benefits" >> security-summary.md
          echo "- Each component tested independently" >> security-summary.md
          echo "- Isolated security boundaries" >> security-summary.md
          echo "- Component-specific threat modeling" >> security-summary.md
          echo "- Reduced attack surface per component" >> security-summary.md
          
          cat security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md 
