name: üß± Modular Lab Manager CI/CD

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Fast checks that can fail early
  lint-and-format:
    name: üîç Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Test modular components independently
  test-components:
    name: üß™ Test Components
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [config, assembly, router, handlers, storage]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run component tests
        run: |
          echo "Testing ${{ matrix.component }} component"
          cargo test ${{ matrix.component }} --verbose

  # Integration testing
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-components]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: lab_manager_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup database for testing
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/lab_manager_test
        run: |
          # Try to install sqlx-cli, but fallback to online mode if it fails
          cargo install sqlx-cli --version 0.6.3 --no-default-features --features postgres || echo "SQLx CLI installation failed, using online mode"
          
          # Run migrations if sqlx-cli is available
          if command -v sqlx &> /dev/null; then
            sqlx migrate run || echo "Migration failed, database might not be ready"
          else
            echo "Skipping migrations - SQLx CLI not available"
          fi

      - name: Run integration tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/lab_manager_test
          STORAGE_PATH: /tmp/lab_manager_test_storage
          SQLX_OFFLINE: false
        run: cargo test --release --verbose

  # Build and test Docker image
  docker-build:
    name: üê≥ Docker Build & Test
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: false
          tags: lab-manager:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm --name lab-manager-test \
            -e DATABASE_URL=sqlite:test.db \
            -e STORAGE_PATH=/tmp/storage \
            lab-manager:test \
            cargo test --release

  # Security scanning
  security-audit:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  # Performance benchmarking (if we add benchmarks)
  benchmarks:
    name: ‚ö° Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

      - name: Run benchmarks
        run: |
          echo "üìä Running performance benchmarks..."
          # cargo bench (uncomment when benchmarks are added)
          echo "‚úÖ Benchmarks would run here" 
