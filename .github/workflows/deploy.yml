name: 🚀 Deploy Lab Manager

on:
  push:
    branches: [ "master" ]
    tags: [ "v*" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
        - microservices
      deployment_mode:
        description: 'Deployment mode'
        required: true
        default: 'full-stack'
        type: choice
        options:
        - full-stack
        - api-only
        - microservices

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build Docker images for different deployment modes
  build-images:
    name: 🏗️ Build Deployment Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        mode: [full-stack, api-only, storage-only]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.mode }}
            type=ref,event=pr,suffix=-${{ matrix.mode }}
            type=semver,pattern={{version}},suffix=-${{ matrix.mode }}
            type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.mode }}

      - name: Create Dockerfile for deployment mode
        run: |
          case "${{ matrix.mode }}" in
            "full-stack")
              cp Dockerfile.dev Dockerfile.deploy
              ;;
            "api-only")
              cat > Dockerfile.deploy << 'EOF'
          FROM rust:1.82-slim
          WORKDIR /usr/src/app
          
          # Install build dependencies
          RUN apt-get update && apt-get install -y \
              pkg-config \
              libssl-dev \
              && rm -rf /var/lib/apt/lists/*
          
          # Copy source code
          COPY . .
          
          # Build with API-only configuration
          RUN cargo build --release --bin lab_manager
          
          # Runtime environment
          ENV RUST_LOG=info
          ENV DEPLOYMENT_MODE=api-only
          
          EXPOSE 3000
          CMD ["./target/release/lab_manager"]
          EOF
              ;;
            "storage-only")
              cat > Dockerfile.deploy << 'EOF'
          FROM rust:1.82-slim
          WORKDIR /usr/src/app
          
          # Install build dependencies
          RUN apt-get update && apt-get install -y \
              pkg-config \
              libssl-dev \
              && rm -rf /var/lib/apt/lists/*
          
          # Copy source code
          COPY . .
          
          # Build with storage-only configuration
          RUN cargo build --release --bin lab_manager
          
          # Runtime environment
          ENV RUST_LOG=info
          ENV DEPLOYMENT_MODE=storage-only
          
          EXPOSE 3000
          CMD ["./target/release/lab_manager"]
          EOF
              ;;
          esac

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.deploy
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.mode }}
          cache-to: type=gha,mode=max,scope=${{ matrix.mode }}

  # Deploy to staging for testing
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/master' || github.event.inputs.environment == 'staging'
    environment:
      name: "staging"
    
    steps:
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment"
          echo "Using modular deployment configuration"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master-full-stack"
          
          # In a real deployment, you would:
          # 1. Connect to your staging environment
          # 2. Pull the new image
          # 3. Update your container orchestration (Docker Compose, K8s, etc.)
          # 4. Run health checks
          
          echo "✅ Staging deployment completed"

  # Deploy to production with approval
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: "production"
    
    steps:
      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment"
          echo "Using production-grade modular configuration"
          
          # In a real deployment:
          # 1. Blue-green deployment strategy
          # 2. Database migrations
          # 3. Health checks
          # 4. Rollback capability
          
          echo "✅ Production deployment completed"

  # Deploy microservices architecture
  deploy-microservices:
    name: 🔧 Deploy Microservices
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event.inputs.deployment_mode == 'microservices'
    environment: 
        name: "microservices"
    
    strategy:
      matrix:
        service: [templates, samples, sequencing, storage]
    
    steps:
      - name: Deploy ${{ matrix.service }} service
        run: |
          echo "🚀 Deploying ${{ matrix.service }} microservice"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master-${{ matrix.service }}"
          
          # In a real microservices deployment:
          # 1. Deploy each service independently
          # 2. Service discovery configuration
          # 3. Load balancer updates
          # 4. Inter-service communication setup
          
          echo "✅ ${{ matrix.service }} service deployed"

  # Health checks and smoke tests
  post-deployment-tests:
    name: 🩺 Post-Deployment Health Checks
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Run health checks
        run: |
          echo "🩺 Running post-deployment health checks"
          
          # In a real setup:
          # 1. API endpoint health checks
          # 2. Database connectivity tests
          # 3. Storage system verification
          # 4. Component integration tests
          
          echo "✅ All health checks passed"

  # Notification and monitoring setup
  notify-deployment:
    name: 📢 Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, deploy-microservices]
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" || "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "✅ Deployment successful!"
            echo "🧱 Modular architecture deployed successfully"
          else
            echo "❌ Deployment failed"
            echo "🔍 Check logs for component-specific issues"
          fi
          
          # In a real setup, send notifications to:
          # - Slack/Discord/Teams
          # - Email
          # - Monitoring systems (DataDog, NewRelic, etc.) 
